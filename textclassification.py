# -*- coding: utf-8 -*-
"""TextClassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H6awZhYWZlW6L3IbOMvzezrCyDz7n4s8
"""

from sklearn.datasets import fetch_20newsgroups
categories = ['alt.atheism','soc.religion.christian','comp.graphics','sci.med']
news_train = fetch_20newsgroups(subset='train', categories=categories,shuffle='true')
news_test = fetch_20newsgroups(subset='test', categories=categories,shuffle='true')

print(news_train.keys())
print(news_test.keys())

news_train.DESCR

import wordcloud

import nltk
nltk.download('stopwords')
nltk.download('punkt')



from nltk.corpus import stopwords
stop_word=set(stopwords.words('english'))
stop_word.update(['.', ',', '"', "'", '?', '!', ':', ';', '(', ')', '[', ']', '{', '}'])

from nltk.tokenize import word_tokenize

from sklearn.feature_extraction.text import CountVectorizer
count_vect = CountVectorizer(stop_words= stop_word, min_df=6)
x_train_tf = count_vect.fit_transform(news_train.data,)
x_train_tf.shape

from sklearn.feature_extraction.text import TfidfTransformer
tfidf_transformer = TfidfTransformer()
x_train_tfidf = tfidf_transformer.fit_transform(x_train_tf)
x_train_tfidf.shape

from sklearn.naive_bayes import MultinomialNB
clf = MultinomialNB().fit(x_train_tfidf, news_train.target)

from sklearn.neighbors import KNeighborsClassifier
clf = KNeighborsClassifier().fit(x_train_tfidf, news_train.target)

from sklearn import svm
clf = svm.LinearSVC()
clf.fit(x_train_tfidf, news_train.target)

from sklearn.ensemble import RandomForestClassifier
clf = RandomForestClassifier(max_depth =2, random_state =0)
clf.fit(x_train_tfidf, news_train.target)

x_test_tf = count_vect.transform(news_test.data)
x_test_tfidf = tfidf_transformer.transform(x_test_tf)
predicted = clf.predict(x_test_tfidf)

print(x_test_tfidf.shape)

from sklearn import metrics
import numpy as np
from sklearn.metrics import accuracy_score
print("Accuracy : " , accuracy_score(news_test.target, predicted))
print(metrics.classification_report(news_test.target,predicted))
##print(news_test.target_names[predicted([[4,5,3,2]])])
##print(predicted)

news_test.target_names